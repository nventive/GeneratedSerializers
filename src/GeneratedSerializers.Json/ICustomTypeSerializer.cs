using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace GeneratedSerializers
{
	/// <summary>
	/// This interface is used to build a custom property/type deserializer for an entity.
	/// </summary>
	/// <typeparam name="T"></typeparam>
	public interface ICustomTypeSerializer<T>
	{
		/// <summary>
		/// Method to implement to specify the custom deserialization of the entity. 
		/// </summary>
		/// <param name="reader">JsonReader to be used for reading/parsing the JSON payload.</param>
		/// <param name="firstChar">Character read by previous consumer of the JsonReader, but that is part of this consumer's responsability.</param>
		/// <param name="overChar">This parameter is to be used to store any character that was read, but determined not to belong to the entity (e.g. closing character ).</param>
		/// <param name="staticSerializerProvider">The provider that gives access to the static deserializers generated by the app. This allow custom type deserializers to 
		/// forward part of the deserialization to generated code.</param>
		/// <returns>The parsed entity.</returns>
		T Read(JsonReader reader, char firstChar, out char? overChar, IStaticSerializerProvider staticSerializerProvider);

		/// <summary>
		/// Method to implement to specify the custom serialization of the entity.
		/// </summary>
		/// <param name="writer">JsonWriter to use to write the JSON payload of the ientity</param>
		/// <param name="value">The entity to serialize</param>
		/// <param name="staticSerializerProvider">The provider that gives access to the static deserializers generated by the app. This allow custom type deserializers to 
		/// forward part of the deserialization to generated code.</param>
		void Write(JsonWriter writer, T value, IStaticSerializerProvider staticSerializerProvider);
	}
}
